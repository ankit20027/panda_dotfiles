; ////////////////// vars /////////////////////////
(defvar my-workspaces "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]")
(defvar show-date false)
(defvar toggle-bt false)
(defvar toggle-vpn false)
(defvar volume 0.00)
(defvar is-mute "")
(defvar brightness 0.00)
(defpoll time
  :interval "1s"
  :initial "hh-mm-ss"
  `date +'%a %I:%M %p'`)
(defpoll date
  :interval "1m"
  :initial "dd-mm-yy"
  `date +'%b %d %Y'`)

;////////////////// helper /////////////////////
(defwidget seperator []
  (label
    :class "seperator"
    :text "‚Ä¢"))

(defwidget slider [?label value onchange]
  (box
    :class "${label}-slider-box slider-box"
    :orientation "h"
    :space-evenly false
    :tooltip value
    (label 
      :text label)
    (scale
      :min 0
      :max 101
      :value value
      :onchange onchange
      :active {onchange != ""})))

(defwidget icon-label-btn [icon label onclick]
  (button
    :class "icon-btn"
    :onclick onclick
    (box
      :orientation "h"
      :space-evenly false
      :spacing 6
      (label
        :text icon)
      (label
        :class "icon-btn-txt"
        :text label))
    ))

(defwidget icon-class [class text]
  (label
    :class class
    :text text))

; //////////////// widgets /////////////////////

; //////////////// bar /////////////////////////
(defwidget bar []
  (box
    :class "bar"
    :orientation "h"
    (workspaces)
    (sysinfo)))


(defwidget workspaces []
  (box
    :class "workspaces"
    :orientation "h"
    :evenly-space false
    :halign "start"
    (box
      :orientation "h"
      (label :text "ÔÖ∫")
      (seperator)
      (for workspace in my-workspaces
        (button
          :class "workspace"
          :onclick `hyprctl dispatch workspace ${workspace}`
          "‚Ä¢"))
    )
  ))


(defwidget sysinfo []
  (box
    :class "sysinfo-box"
    :orientation "horizontal"
    :space-evenly false
    :spacing 6
    :halign "center"
    (slider
      :label {EWW_BATTERY['BAT0']['status']=="Charging" ? "Ôá¶" : "ÔÉß"}
      :value {EWW_BATTERY['BAT0']['capacity']}
      :onchange "")
    (slider
      :label "Ôî∏"
      :value {round(EWW_RAM['used_mem_perc'], 0)}
      :onchange "")
    (slider
      :label "Ôãõ"
      :value {round(EWW_CPU['avg'], 0)}
      :onchange "")
    (seperator)
    (slider
      :label {is-mute=="[MUTED]"? "Ôö©" : "ÔÄß"}
      :value {volume*100}
      :onchange "wpctl set-volume @DEFAULT_AUDIO_SINK@ $(awk 'BEGIN {print {}/100}')")
    (slider
      :label "ÔÉ´"
      :value {brightness}
      :onchange "brillo -S {}")
    (seperator)
    (icon-label-btn 
      :icon "Ôá´"
      :label "WIFI"
      :onclick `hyprctl dispatch exec foot nmtui`)
    (seperator)
    (icon-label-btn 
      :icon {toggle-bt? "Ôäì": "ÔÅû"}
      :label "BT"
      :onclick {toggle-bt? `eww update toggle-bt=${!toggle-bt} && systemctl stop bluetooth` 
        : `eww update toggle-bt=${!toggle-bt} && systemctl start bluetooth && hyprctl dispatch exec blueman-manager`})
    (seperator)
    (icon-label-btn
      :icon { toggle-vpn? "Ôõø" : "ÔÅû"}
      :label "IIIT"
      :onclick "eww update toggle-vpn=${!toggle-vpn} && hyprctl dispatch exec foot 'sudo openfortivpn'"})
    (seperator)
    (button
      :class "time-btn"
      :onclick `eww update show-date=${!show-date}`
      (box
        :orientation "h"
        :space-evenly false
        :spacing 10
        (icon-class
          :class "super-light-icon"
          :text {show-date ? "ÔÅ≥" : "ÔÄó"})
        (label
          :class "time-text"
          :text {show-date ? date : time}))
    )
  ))

; /////////////////////// power-menu /////////////////////
(defwidget powermenu []
  (box
    :class "powermenu-box"
    :orientation "v"
    :space-evenly true
    :spacing 8
    (button
      :onclick "systemctl poweroff -i"
      (label
        :text "ÔÄë"))
    (button
      :onclick "systemctl reboot -i"
      (label
        :text "Ôç£"))
    (button
      :onclick "eww close powermenu; swaylock -C ~/.config/swaylock/config & systemctl suspend"
      (label
        :text "·∂ªzê∞Å"))
    (button
      :onclick "hyprctl dispatch exit"
      (label
        :text "Ôãµ"))
  ))

; /////////////////////// greeter ////////////////////////
(defwidget greet []
  (box
    :class "greet-main-box"
    :orientation "v"
    :space-evenly false
    (box
      :class "greet-box"
      :orientation "h"
      :space-evenly false
      (label
        :class "pacifico"
        :wrap true
	      :limit-width 6
        :show-truncated false
        :text date)
      (label
        :class "greet-sep"
        :wrap true
        :text "‚Ä¢ ‚Ä¢ ‚Ä¢")
      (label
        :class "greet-text"
        :wrap true
        :text "‡§∞‡§æ‡§Æ ‡§∞‡§æ‡§Æ"))
    (label 
      :class "pacifico"
      :text "Having A Good Day")
  ))
  

; //////////////////////// main //////////////////////////
(defwindow bar
  :monitor 0
  :stacking "fg"
  :exclusive true
  :geometry (geometry
    :x "0%"
    :y "0%"
    :width "90%"
    :height "26px"
    :anchor "top center")
  (bar)
)

(defwindow powermenu
  :monitor 0
  :stacking "fg"
  :geometry (geometry
    :x "0%"
    :y "0%"
    :width "6%"
    :height "40%"
    :anchor "center right")
  (powermenu))

(defwindow greet
  :monitor 0
  :stacking "bg"
  :geometry (geometry
    :x "2%"
    :y "3%"
    :width "190px"
    :height "12%"
    :anchor "top right")
  (greet))
