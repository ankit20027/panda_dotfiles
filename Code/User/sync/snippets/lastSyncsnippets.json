{"ref":"37c9b1e8-8f73-4614-aa0d-6efad8ae5cba","syncData":{"version":1,"machineId":"94ccdd24-6ac8-4600-83b3-68b68940d4e2","content":"{\"java.json\":\"{\\n\\t// Place your snippets for java here. Each snippet is defined under a snippet name and has a prefix, body and \\n\\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\\n\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the \\n\\t// same ids are connected.\\n\\t// Example:\\n\\t// \\\"Print to console\\\": {\\n\\t// \\t\\\"prefix\\\": \\\"log\\\",\\n\\t// \\t\\\"body\\\": [\\n\\t// \\t\\t\\\"console.log('$1');\\\",\\n\\t// \\t\\t\\\"$2\\\"\\n\\t// \\t],\\n\\t// \\t\\\"description\\\": \\\"Log output to console\\\"\\n\\t// }\\n\\t\\\"Template for CP\\\" : {\\n        \\\"prefix\\\": \\\"template\\\",\\n        \\\"body\\\":[\\n            \\\"import java.util.*;\\\",\\n            \\\"import java.io.*;\\\",\\n            \\n            \\\"public class Main {\\\",\\n                \\\"$LINE_COMMENT For fast input output\\\",\\n                \\\"static class FastReader {\\\",\\n                    \\\"BufferedReader br;\\\",\\n                    \\\"StringTokenizer st;\\\",\\n             \\n                    \\\"public FastReader()\\\",\\n                    \\\"{ try {br = new BufferedReader(\\\",\\n                        \\\"new FileReader(\\\\\\\"input.txt\\\\\\\"));\\\",\\n                        \\\"PrintStream out = new PrintStream(new FileOutputStream(\\\\\\\"output.txt\\\\\\\"));\\\",\\n                        \\\"System.setOut(out);}\\\",\\n                    \\\"catch(Exception e) { br = new BufferedReader(new InputStreamReader(System.in));}\\\",\\n                    \\\"}\\\",\\n             \\n                    \\\"String next()\\\",\\n                    \\\"{\\\",\\n                        \\\"while (st == null || !st.hasMoreElements()) {\\\",\\n                            \\\"try {st = new StringTokenizer(br.readLine());}\\\",\\n                            \\\"catch (IOException e) {\\\",\\n                                \\\"e.printStackTrace();}\\\",\\n                        \\\"}\\\",\\n                        \\\"return st.nextToken();\\\",\\n                    \\\"}\\\",\\n             \\n                    \\\"int nextInt() { return Integer.parseInt(next()); }\\\",         \\n                    \\\"long nextLong() { return Long.parseLong(next()); }\\\",         \\n                    \\\"double nextDouble() {return Double.parseDouble(next()); }\\\",\\n             \\n                    \\\"String nextLine()\\\",\\n                    \\\"{\\\",\\n                        \\\"String str = \\\\\\\"\\\\\\\";\\\",\\n                        \\\"try {\\\",\\n                        \\\"str = br.readLine();\\\",\\n                        \\\"}\\\",\\n                        \\\"catch (IOException e) {\\\",\\n                            \\\"e.printStackTrace();\\\",\\n                        \\\"}\\\",\\n                        \\\"return str;\\\",\\n                    \\\"}\\\",\\n                \\\"}\\\",\\n                \\\"$LINE_COMMENT end of fast i/o code\\\",\\n            \\n                \\n                \\\"public static void main(String[] args) {\\\",\\n                    \\\"FastReader reader = new FastReader();\\\",\\n                    \\\"$0\\\",\\n            \\\"}\\\",\\n        \\\"}\\\"\\n        ],\\n        \\\"description\\\": \\\"template for cp in java\\\"\\n    },\\n\\n    \\\"For loop\\\":{\\n        \\\"prefix\\\" : \\\"forl\\\",\\n        \\\"body\\\" : [\\n            \\\"for(int i = 0; i < $0; i++)\\\"\\n        ]\\n    }                        \\n}\"}"}}